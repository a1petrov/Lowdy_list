#include <iostream>
using namespace std;
struct Node
{
    int data;
    Node* next;
};
class List
{
private:
    Node* head;
public:
    List() //конструктор класса без параметров
    {
        head = nullptr;
    }   
    void addNode(int d)//метод, добавляющий новый элемент в конец списка
    {
        Node* nd = new Node;
        nd->data = d;        
        nd->next = nullptr;
        if (head == nullptr)
            head = nd;
        else                 
        {
            Node* current = head;
            
            while (current->next != nullptr)
                current = current->next;
            
            current->next = nd;
        }
    }
    void deletelem(Node* lst/*Node* root*/)
    {
        Node* temp;
        temp = head;
        while (temp->next != lst) // просматриваем список начиная с корня
        { // пока не найдем узел, предшествующий lst
            temp = temp->next;
        }
        temp->next = lst->next; // переставляем указатель
        free(lst); // освобождаем память удаляемого узла
        //return(temp);
    }
    int search(int data)   // return index
    {
        int index = 0;
        Node* temp = new Node;
        temp->data = data;
        temp = head;
        while (temp->data != data)
        {
            index++;
            temp = temp->next;
        }
        cout << index << endl;
        return index;
    }
    //int search2(int data)   // return index
    //{
    //    Node* node = head;
    //    for (int i = 0; i < size; i++)
    //    {
    //        if (node->data == data)
    //        {
    //            return i;
    //        }
    //        node = node->next;
    //    }
    //    return -1; // not found
    //}
    //void remove(int index)//удаление элемента по индексу
    //{
    //    if (!x)
    //        return;

    //    if (index == 0)
    //    {
    //        Node* newHead = head->next;
    //        delete head;
    //        head = newHead;
    //        --x;
    //        return;
    //    }

    //    Node* node = head;
    //    for (int i = 0; i < index - 1; i++)
    //    {
    //        node = node->next;
    //    }

    //    Node* delNode = node->next;
    //    node->next = delNode->next;
    //    delete delNode;
    //    --x;

    //}

    void printList()//метод, выводящий связанный список на экран
    {
        Node* current = head;
        while (current != NULL)
        {
            cout << current->data << endl;
            current = current->next;
        }
    }
};
int main()
{
    List myList;
    myList.addNode(1);
    myList.addNode(5);
    myList.addNode(11);
    myList.addNode(16);
    myList.addNode(20);
    //myList.deletelem();
    //myList.remove(4);
    myList.search(20);
    myList.printList();
    return 0;
}

